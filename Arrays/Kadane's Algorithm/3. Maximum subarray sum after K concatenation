#Brute force

def maxSubSumKConcat(arr, n, k):
    new = [0]*(n*k)
    length = len(new)
    for i in range(length):
        new[i] = arr[i%n]

    s = 0
    maxi = -10e9
    for i in range(length):
        s += new[i]
        if s > maxi :
            maxi = s
        if s < 0:
            s = 0            
            
    return maxi


#Opptimal O(n)
All the cases are-
If K = 1
    We simply apply Kadane’s algorithm and return the maximum sum.
   
Else, we find the sum of elements (‘ARR_SUM'). Now there are two cases-
If 'ARR_SUM' <= 0
   Then, we will find the maximum subarray sum for ‘K’ = 2 irrespective of value of ‘K’ and return it as answer.
   This is because the maximum subarray can’t contain complete ‘ARR’. If we include the complete vector, then it will only decrease the subarray sum due to the negative total.
If 'ARR_SUM' > 0
    Then, we will find the maximum subarray sum for K = 2 and we return ‘MAX_SUBARRAY_SUM’ plus (K-2) times ‘ARR_SUM' as the answer.
   This is because ‘ARR_SUM' is greater than 0, including it ‘K-2’ times will only increase the subarray sum.



def kadanes(arr, n) :
    s , maxi = 0, -10e9
    for i in range(n):
        s += arr[i]
        if s > maxi :
            maxi = s
        if s < 0:
            s = 0
    return maxi

def kadanesForTwo(arr, n):
    new = [0] * (2*n)
    for i in range(2*n):
        new[i] = arr[i%n]
    return kadanes(new, 2*n)

def maxSubSumKConcat(arr, n, k):
    if k == 1:
        return kadanes(arr, n)      
    sumGivenArr = 0   
    for i in range(n):
        sumGivenArr += arr[i]     
    if sumGivenArr < 0:
        return kadanesForTwo(arr, n)
    else:
        return kadanesForTwo(arr,n) + (k-2)*sumGivenArr

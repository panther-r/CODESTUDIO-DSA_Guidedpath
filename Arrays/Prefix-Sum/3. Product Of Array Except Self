Bruteforce 

# def getProductArrayExceptSelf(arr, n) :
#     ans = [1] * n
#     mod = 10**9+7
#     for i in range(n) :
#         for j in range(n) :
#             if j != i:
#                 ans[i] = (ans[i] * arr[j]) % mod
#     return ans
#
# arr = [2,1,3,4]
# print(getProductArrayExceptSelf(arr,4))


Optimal 
#1 method 1
# def productEIS(arr):
#     mod = 10**9+7
#     n = len(arr)
#     count_0 = 0
#     product = 1
#
#     for i in range(n):
#         if arr[i] == 0:
#             count_0 += 1
#         else:
#             product *= arr[i]
#
#     if count_0 > 1:
#         return [0 for _ in range(n)]
#     elif count_0 == 0:
#         newProduct = product
#     else:
#         newProduct = 0
#
#     for i in range(n):
#         if arr[i] == 0:
#             arr[i] = product
#         else:
#             arr[i] = (newProduct // arr[i])%mod
#     return arr


#Optimal
#Method 2 (using prefixsum algorithm)

# def getProductArrayExceptSelf(arr, n) :
#     output = [1] * n
#     product = 1
#     for i in range(n):
#         output[i] = product
#         product = (product * arr[i]) % mod
#     product = 1
#     for i in range(n - 1, -1, -1):
#         output[i] =(output[i] * product) % mod
#         product = (product * arr[i]) % mod
#     return output

